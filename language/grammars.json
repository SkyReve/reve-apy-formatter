{
  "scopeName": "source.applicablepython",
  "name": "Applicable Python",
  "fileTypes": ["apy"],
  "patterns": [
    { "include": "#shebang" },
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#decorators" },
    { "include": "#function-def" },
    { "include": "#function-calls" },
    { "include": "#class-def" },
    { "include": "#operators" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "shebang": {
      "patterns": [
        {
          "name": "meta.special.shebang.applicablepython",
          "match": "^#!.*python.*$"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.applicablepython",
          "match": "#.*$"
        },
        {
          "name": "comment.block.applicablepython.single",
          "begin": "'''",
          "end": "'''",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.applicablepython"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.applicablepython"
            }
          }
        },
        {
          "name": "comment.block.applicablepython.double",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.applicablepython"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.applicablepython"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.applicablepython",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.applicablepython",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.applicablepython",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.applicablepython",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.raw.applicablepython",
          "begin": "r'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.applicablepython",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.raw.applicablepython",
          "begin": "r\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.applicablepython",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.applicablepython",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.float.applicablepython",
          "match": "\\b\\d+\\.\\d*([eE][-+]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.applicablepython",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.applicablepython",
          "match": "\\b(?:if|else|elif|for|while|try|except|finally|with|as|def|return|class|pass|break|continue|import|from|async|await)\\b"
        },
        {
          "name": "constant.language.applicablepython",
          "match": "\\b(?:True|False|None)\\b"
        }
      ]
    },
    "decorators": {
      "patterns": [
        {
          "name": "meta.decorator.applicablepython",
          "match": "^\\s*@\\w+"
        }
      ]
    },
    "function-def": {
      "patterns": [
        {
          "name": "meta.function.definition.applicablepython",
          "begin": "(def)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": { "name": "storage.type.function.def.applicablepython" },
            "2": { "name": "entity.name.function.applicablepython" }
          },
          "end": ":",
          "endCaptures": {
            "0": { "name": "punctuation.section.function.end.applicablepython" }
          },
          "patterns": [{ "include": "#parameters" }]
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "name": "variable.parameter.applicablepython",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "punctuation.separator.parameter.applicablepython",
          "match": ","
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "meta.function-call.applicablepython",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        }
      ]
    },
    "class-def": {
      "patterns": [
        {
          "name": "meta.class.definition.applicablepython",
          "begin": "(class)\\s+([A-Z][a-zA-Z0-9_]*)\\s*(\\(.*?\\))?\\s*:",
          "beginCaptures": {
            "1": { "name": "storage.type.class.def.applicablepython" },
            "2": { "name": "entity.name.type.class.applicablepython" },
            "3": { "name": "meta.class.inheritance.applicablepython" }
          },
          "end": "$",
          "patterns": []
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.applicablepython",
          "match": "=|\\+|\\-|\\*|\\/|%|==|!=|<=|>=|<|>|and|or|not|\\^|~|<<|>>"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.applicablepython",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
